# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_vsp')).lstrip('.')
        return importlib.import_module(mname)
    _vsp = swig_import_helper()
    del swig_import_helper
elif version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vsp', [dirname(__file__)])
        except ImportError:
            import _vsp
            return _vsp
        if fp is not None:
            try:
                _mod = imp.load_module('_vsp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vsp = swig_import_helper()
    del swig_import_helper
else:
    import _vsp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vsp.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _vsp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _vsp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _vsp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _vsp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _vsp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _vsp.SwigPyIterator_copy(self)

    def next(self):
        return _vsp.SwigPyIterator_next(self)

    def __next__(self):
        return _vsp.SwigPyIterator___next__(self)

    def previous(self):
        return _vsp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _vsp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _vsp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _vsp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _vsp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _vsp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _vsp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _vsp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _vsp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.IntVector___nonzero__(self)

    def __bool__(self):
        return _vsp.IntVector___bool__(self)

    def __len__(self):
        return _vsp.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.IntVector___setitem__(self, *args)

    def pop(self):
        return _vsp.IntVector_pop(self)

    def append(self, x):
        return _vsp.IntVector_append(self, x)

    def empty(self):
        return _vsp.IntVector_empty(self)

    def size(self):
        return _vsp.IntVector_size(self)

    def swap(self, v):
        return _vsp.IntVector_swap(self, v)

    def begin(self):
        return _vsp.IntVector_begin(self)

    def end(self):
        return _vsp.IntVector_end(self)

    def rbegin(self):
        return _vsp.IntVector_rbegin(self)

    def rend(self):
        return _vsp.IntVector_rend(self)

    def clear(self):
        return _vsp.IntVector_clear(self)

    def get_allocator(self):
        return _vsp.IntVector_get_allocator(self)

    def pop_back(self):
        return _vsp.IntVector_pop_back(self)

    def erase(self, *args):
        return _vsp.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.IntVector_push_back(self, x)

    def front(self):
        return _vsp.IntVector_front(self)

    def back(self):
        return _vsp.IntVector_back(self)

    def assign(self, n, x):
        return _vsp.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp.IntVector_resize(self, *args)

    def insert(self, *args):
        return _vsp.IntVector_insert(self, *args)

    def reserve(self, n):
        return _vsp.IntVector_reserve(self, n)

    def capacity(self):
        return _vsp.IntVector_capacity(self)
    __swig_destroy__ = _vsp.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _vsp.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _vsp.DoubleVector___bool__(self)

    def __len__(self):
        return _vsp.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _vsp.DoubleVector_pop(self)

    def append(self, x):
        return _vsp.DoubleVector_append(self, x)

    def empty(self):
        return _vsp.DoubleVector_empty(self)

    def size(self):
        return _vsp.DoubleVector_size(self)

    def swap(self, v):
        return _vsp.DoubleVector_swap(self, v)

    def begin(self):
        return _vsp.DoubleVector_begin(self)

    def end(self):
        return _vsp.DoubleVector_end(self)

    def rbegin(self):
        return _vsp.DoubleVector_rbegin(self)

    def rend(self):
        return _vsp.DoubleVector_rend(self)

    def clear(self):
        return _vsp.DoubleVector_clear(self)

    def get_allocator(self):
        return _vsp.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _vsp.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _vsp.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.DoubleVector_push_back(self, x)

    def front(self):
        return _vsp.DoubleVector_front(self)

    def back(self):
        return _vsp.DoubleVector_back(self)

    def assign(self, n, x):
        return _vsp.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _vsp.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _vsp.DoubleVector_reserve(self, n)

    def capacity(self):
        return _vsp.DoubleVector_capacity(self)
    __swig_destroy__ = _vsp.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _vsp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.StringVector___nonzero__(self)

    def __bool__(self):
        return _vsp.StringVector___bool__(self)

    def __len__(self):
        return _vsp.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _vsp.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.StringVector___setitem__(self, *args)

    def pop(self):
        return _vsp.StringVector_pop(self)

    def append(self, x):
        return _vsp.StringVector_append(self, x)

    def empty(self):
        return _vsp.StringVector_empty(self)

    def size(self):
        return _vsp.StringVector_size(self)

    def swap(self, v):
        return _vsp.StringVector_swap(self, v)

    def begin(self):
        return _vsp.StringVector_begin(self)

    def end(self):
        return _vsp.StringVector_end(self)

    def rbegin(self):
        return _vsp.StringVector_rbegin(self)

    def rend(self):
        return _vsp.StringVector_rend(self)

    def clear(self):
        return _vsp.StringVector_clear(self)

    def get_allocator(self):
        return _vsp.StringVector_get_allocator(self)

    def pop_back(self):
        return _vsp.StringVector_pop_back(self)

    def erase(self, *args):
        return _vsp.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.StringVector_push_back(self, x)

    def front(self):
        return _vsp.StringVector_front(self)

    def back(self):
        return _vsp.StringVector_back(self)

    def assign(self, n, x):
        return _vsp.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _vsp.StringVector_resize(self, *args)

    def insert(self, *args):
        return _vsp.StringVector_insert(self, *args)

    def reserve(self, n):
        return _vsp.StringVector_reserve(self, n)

    def capacity(self):
        return _vsp.StringVector_capacity(self)
    __swig_destroy__ = _vsp.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _vsp.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.DoubleVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.DoubleVecVec___nonzero__(self)

    def __bool__(self):
        return _vsp.DoubleVecVec___bool__(self)

    def __len__(self):
        return _vsp.DoubleVecVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp.DoubleVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.DoubleVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.DoubleVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.DoubleVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.DoubleVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.DoubleVecVec___setitem__(self, *args)

    def pop(self):
        return _vsp.DoubleVecVec_pop(self)

    def append(self, x):
        return _vsp.DoubleVecVec_append(self, x)

    def empty(self):
        return _vsp.DoubleVecVec_empty(self)

    def size(self):
        return _vsp.DoubleVecVec_size(self)

    def swap(self, v):
        return _vsp.DoubleVecVec_swap(self, v)

    def begin(self):
        return _vsp.DoubleVecVec_begin(self)

    def end(self):
        return _vsp.DoubleVecVec_end(self)

    def rbegin(self):
        return _vsp.DoubleVecVec_rbegin(self)

    def rend(self):
        return _vsp.DoubleVecVec_rend(self)

    def clear(self):
        return _vsp.DoubleVecVec_clear(self)

    def get_allocator(self):
        return _vsp.DoubleVecVec_get_allocator(self)

    def pop_back(self):
        return _vsp.DoubleVecVec_pop_back(self)

    def erase(self, *args):
        return _vsp.DoubleVecVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_DoubleVecVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.DoubleVecVec_push_back(self, x)

    def front(self):
        return _vsp.DoubleVecVec_front(self)

    def back(self):
        return _vsp.DoubleVecVec_back(self)

    def assign(self, n, x):
        return _vsp.DoubleVecVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp.DoubleVecVec_resize(self, *args)

    def insert(self, *args):
        return _vsp.DoubleVecVec_insert(self, *args)

    def reserve(self, n):
        return _vsp.DoubleVecVec_reserve(self, n)

    def capacity(self):
        return _vsp.DoubleVecVec_capacity(self)
    __swig_destroy__ = _vsp.delete_DoubleVecVec
    __del__ = lambda self: None
DoubleVecVec_swigregister = _vsp.DoubleVecVec_swigregister
DoubleVecVec_swigregister(DoubleVecVec)

class Vec3dVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3dVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3dVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _vsp.Vec3dVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _vsp.Vec3dVec___nonzero__(self)

    def __bool__(self):
        return _vsp.Vec3dVec___bool__(self)

    def __len__(self):
        return _vsp.Vec3dVec___len__(self)

    def __getslice__(self, i, j):
        return _vsp.Vec3dVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _vsp.Vec3dVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _vsp.Vec3dVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _vsp.Vec3dVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _vsp.Vec3dVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _vsp.Vec3dVec___setitem__(self, *args)

    def pop(self):
        return _vsp.Vec3dVec_pop(self)

    def append(self, x):
        return _vsp.Vec3dVec_append(self, x)

    def empty(self):
        return _vsp.Vec3dVec_empty(self)

    def size(self):
        return _vsp.Vec3dVec_size(self)

    def swap(self, v):
        return _vsp.Vec3dVec_swap(self, v)

    def begin(self):
        return _vsp.Vec3dVec_begin(self)

    def end(self):
        return _vsp.Vec3dVec_end(self)

    def rbegin(self):
        return _vsp.Vec3dVec_rbegin(self)

    def rend(self):
        return _vsp.Vec3dVec_rend(self)

    def clear(self):
        return _vsp.Vec3dVec_clear(self)

    def get_allocator(self):
        return _vsp.Vec3dVec_get_allocator(self)

    def pop_back(self):
        return _vsp.Vec3dVec_pop_back(self)

    def erase(self, *args):
        return _vsp.Vec3dVec_erase(self, *args)

    def __init__(self, *args):
        this = _vsp.new_Vec3dVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _vsp.Vec3dVec_push_back(self, x)

    def front(self):
        return _vsp.Vec3dVec_front(self)

    def back(self):
        return _vsp.Vec3dVec_back(self)

    def assign(self, n, x):
        return _vsp.Vec3dVec_assign(self, n, x)

    def resize(self, *args):
        return _vsp.Vec3dVec_resize(self, *args)

    def insert(self, *args):
        return _vsp.Vec3dVec_insert(self, *args)

    def reserve(self, n):
        return _vsp.Vec3dVec_reserve(self, n)

    def capacity(self):
        return _vsp.Vec3dVec_capacity(self)
    __swig_destroy__ = _vsp.delete_Vec3dVec
    __del__ = lambda self: None
Vec3dVec_swigregister = _vsp.Vec3dVec_swigregister
Vec3dVec_swigregister(Vec3dVec)

VSP_OK = _vsp.VSP_OK
VSP_INVALID_PTR = _vsp.VSP_INVALID_PTR
VSP_INVALID_TYPE = _vsp.VSP_INVALID_TYPE
VSP_CANT_FIND_TYPE = _vsp.VSP_CANT_FIND_TYPE
VSP_CANT_FIND_PARM = _vsp.VSP_CANT_FIND_PARM
VSP_CANT_FIND_NAME = _vsp.VSP_CANT_FIND_NAME
VSP_INVALID_GEOM_ID = _vsp.VSP_INVALID_GEOM_ID
VSP_FILE_DOES_NOT_EXIST = _vsp.VSP_FILE_DOES_NOT_EXIST
VSP_FILE_WRITE_FAILURE = _vsp.VSP_FILE_WRITE_FAILURE
VSP_FILE_READ_FAILURE = _vsp.VSP_FILE_READ_FAILURE
VSP_WRONG_XSEC_TYPE = _vsp.VSP_WRONG_XSEC_TYPE
VSP_WRONG_FILE_TYPE = _vsp.VSP_WRONG_FILE_TYPE
VSP_INDEX_OUT_RANGE = _vsp.VSP_INDEX_OUT_RANGE
VSP_INVALID_XSEC_ID = _vsp.VSP_INVALID_XSEC_ID
VSP_INVALID_ID = _vsp.VSP_INVALID_ID
VSP_CANT_SET_NOT_EQ_PARM = _vsp.VSP_CANT_SET_NOT_EQ_PARM
VSP_AMBIGUOUS_SUBSURF = _vsp.VSP_AMBIGUOUS_SUBSURF
VSP_INVALID_VARPRESET_SETNAME = _vsp.VSP_INVALID_VARPRESET_SETNAME
VSP_INVALID_VARPRESET_GROUPNAME = _vsp.VSP_INVALID_VARPRESET_GROUPNAME
VSP_CONFORMAL_PARENT_UNSUPPORTED = _vsp.VSP_CONFORMAL_PARENT_UNSUPPORTED
VSP_UNEXPECTED_RESET_REMAP_ID = _vsp.VSP_UNEXPECTED_RESET_REMAP_ID
VSP_INVALID_INPUT_VAL = _vsp.VSP_INVALID_INPUT_VAL
SYM_XY = _vsp.SYM_XY
SYM_XZ = _vsp.SYM_XZ
SYM_YZ = _vsp.SYM_YZ
SYM_ROT_X = _vsp.SYM_ROT_X
SYM_ROT_Y = _vsp.SYM_ROT_Y
SYM_ROT_Z = _vsp.SYM_ROT_Z
SYM_PLANAR_TYPES = _vsp.SYM_PLANAR_TYPES
SYM_NUM_TYPES = _vsp.SYM_NUM_TYPES
XSEC_FUSE = _vsp.XSEC_FUSE
XSEC_STACK = _vsp.XSEC_STACK
XSEC_WING = _vsp.XSEC_WING
XSEC_CUSTOM = _vsp.XSEC_CUSTOM
XSEC_PROP = _vsp.XSEC_PROP
XSEC_NUM_TYPES = _vsp.XSEC_NUM_TYPES
X_DIR = _vsp.X_DIR
Y_DIR = _vsp.Y_DIR
Z_DIR = _vsp.Z_DIR
LEN_MM = _vsp.LEN_MM
LEN_CM = _vsp.LEN_CM
LEN_M = _vsp.LEN_M
LEN_IN = _vsp.LEN_IN
LEN_FT = _vsp.LEN_FT
LEN_YD = _vsp.LEN_YD
LEN_UNITLESS = _vsp.LEN_UNITLESS
DELIM_COMMA = _vsp.DELIM_COMMA
DELIM_USCORE = _vsp.DELIM_USCORE
DELIM_SPACE = _vsp.DELIM_SPACE
DELIM_NONE = _vsp.DELIM_NONE
DELIM_NUM_TYPES = _vsp.DELIM_NUM_TYPES
SET_3D = _vsp.SET_3D
SET_2D = _vsp.SET_2D
VIEW_LEFT = _vsp.VIEW_LEFT
VIEW_RIGHT = _vsp.VIEW_RIGHT
VIEW_TOP = _vsp.VIEW_TOP
VIEW_BOTTOM = _vsp.VIEW_BOTTOM
VIEW_FRONT = _vsp.VIEW_FRONT
VIEW_REAR = _vsp.VIEW_REAR
VIEW_NONE = _vsp.VIEW_NONE
LEFT = _vsp.LEFT
RIGHT = _vsp.RIGHT
UP = _vsp.UP
DOWN = _vsp.DOWN
VIEW_1 = _vsp.VIEW_1
VIEW_2HOR = _vsp.VIEW_2HOR
VIEW_2VER = _vsp.VIEW_2VER
VIEW_4 = _vsp.VIEW_4
ROT_0 = _vsp.ROT_0
ROT_90 = _vsp.ROT_90
ROT_180 = _vsp.ROT_180
ROT_270 = _vsp.ROT_270
MANUAL = _vsp.MANUAL
REFERENCE = _vsp.REFERENCE
NOSCALE = _vsp.NOSCALE
ANG_RAD = _vsp.ANG_RAD
ANG_DEG = _vsp.ANG_DEG
XS_SHIFT_LE = _vsp.XS_SHIFT_LE
XS_SHIFT_MID = _vsp.XS_SHIFT_MID
XS_SHIFT_TE = _vsp.XS_SHIFT_TE
XS_POINT = _vsp.XS_POINT
XS_CIRCLE = _vsp.XS_CIRCLE
XS_ELLIPSE = _vsp.XS_ELLIPSE
XS_SUPER_ELLIPSE = _vsp.XS_SUPER_ELLIPSE
XS_ROUNDED_RECTANGLE = _vsp.XS_ROUNDED_RECTANGLE
XS_GENERAL_FUSE = _vsp.XS_GENERAL_FUSE
XS_FILE_FUSE = _vsp.XS_FILE_FUSE
XS_FOUR_SERIES = _vsp.XS_FOUR_SERIES
XS_SIX_SERIES = _vsp.XS_SIX_SERIES
XS_BICONVEX = _vsp.XS_BICONVEX
XS_WEDGE = _vsp.XS_WEDGE
XS_BEZIER = _vsp.XS_BEZIER
XS_FILE_AIRFOIL = _vsp.XS_FILE_AIRFOIL
XS_CST_AIRFOIL = _vsp.XS_CST_AIRFOIL
XS_VKT_AIRFOIL = _vsp.XS_VKT_AIRFOIL
XS_NUM_TYPES = _vsp.XS_NUM_TYPES
CLOSE_NONE = _vsp.CLOSE_NONE
CLOSE_SKEWLOW = _vsp.CLOSE_SKEWLOW
CLOSE_SKEWUP = _vsp.CLOSE_SKEWUP
CLOSE_SKEWBOTH = _vsp.CLOSE_SKEWBOTH
CLOSE_EXTRAP = _vsp.CLOSE_EXTRAP
CLOSE_NUM_TYPES = _vsp.CLOSE_NUM_TYPES
TRIM_NONE = _vsp.TRIM_NONE
TRIM_X = _vsp.TRIM_X
TRIM_THICK = _vsp.TRIM_THICK
TRIM_NUM_TYPES = _vsp.TRIM_NUM_TYPES
BOR_FLOWTHROUGH = _vsp.BOR_FLOWTHROUGH
BOR_UPPER = _vsp.BOR_UPPER
BOR_LOWER = _vsp.BOR_LOWER
BOR_NUM_MODES = _vsp.BOR_NUM_MODES
ABS = _vsp.ABS
REL = _vsp.REL
XSEC_BOTH_SIDES = _vsp.XSEC_BOTH_SIDES
XSEC_LEFT_SIDE = _vsp.XSEC_LEFT_SIDE
XSEC_RIGHT_SIDE = _vsp.XSEC_RIGHT_SIDE
IMPORT_STL = _vsp.IMPORT_STL
IMPORT_NASCART = _vsp.IMPORT_NASCART
IMPORT_CART3D_TRI = _vsp.IMPORT_CART3D_TRI
IMPORT_XSEC_MESH = _vsp.IMPORT_XSEC_MESH
IMPORT_PTS = _vsp.IMPORT_PTS
IMPORT_V2 = _vsp.IMPORT_V2
IMPORT_BEM = _vsp.IMPORT_BEM
IMPORT_XSEC_WIRE = _vsp.IMPORT_XSEC_WIRE
EXPORT_FELISA = _vsp.EXPORT_FELISA
EXPORT_XSEC = _vsp.EXPORT_XSEC
EXPORT_STL = _vsp.EXPORT_STL
EXPORT_AWAVE = _vsp.EXPORT_AWAVE
EXPORT_NASCART = _vsp.EXPORT_NASCART
EXPORT_POVRAY = _vsp.EXPORT_POVRAY
EXPORT_CART3D = _vsp.EXPORT_CART3D
EXPORT_VORXSEC = _vsp.EXPORT_VORXSEC
EXPORT_XSECGEOM = _vsp.EXPORT_XSECGEOM
EXPORT_GMSH = _vsp.EXPORT_GMSH
EXPORT_X3D = _vsp.EXPORT_X3D
EXPORT_STEP = _vsp.EXPORT_STEP
EXPORT_PLOT3D = _vsp.EXPORT_PLOT3D
EXPORT_IGES = _vsp.EXPORT_IGES
EXPORT_BEM = _vsp.EXPORT_BEM
EXPORT_DXF = _vsp.EXPORT_DXF
EXPORT_FACET = _vsp.EXPORT_FACET
EXPORT_SVG = _vsp.EXPORT_SVG
NO_FILE_TYPE = _vsp.NO_FILE_TYPE
COMP_GEOM_TXT_TYPE = _vsp.COMP_GEOM_TXT_TYPE
COMP_GEOM_CSV_TYPE = _vsp.COMP_GEOM_CSV_TYPE
DRAG_BUILD_TSV_TYPE = _vsp.DRAG_BUILD_TSV_TYPE
SLICE_TXT_TYPE = _vsp.SLICE_TXT_TYPE
MASS_PROP_TXT_TYPE = _vsp.MASS_PROP_TXT_TYPE
DEGEN_GEOM_CSV_TYPE = _vsp.DEGEN_GEOM_CSV_TYPE
DEGEN_GEOM_M_TYPE = _vsp.DEGEN_GEOM_M_TYPE
CFD_STL_TYPE = _vsp.CFD_STL_TYPE
CFD_POLY_TYPE = _vsp.CFD_POLY_TYPE
CFD_TRI_TYPE = _vsp.CFD_TRI_TYPE
CFD_OBJ_TYPE = _vsp.CFD_OBJ_TYPE
CFD_DAT_TYPE = _vsp.CFD_DAT_TYPE
CFD_KEY_TYPE = _vsp.CFD_KEY_TYPE
CFD_GMSH_TYPE = _vsp.CFD_GMSH_TYPE
CFD_SRF_TYPE = _vsp.CFD_SRF_TYPE
CFD_TKEY_TYPE = _vsp.CFD_TKEY_TYPE
PROJ_AREA_CSV_TYPE = _vsp.PROJ_AREA_CSV_TYPE
WAVE_DRAG_TXT_TYPE = _vsp.WAVE_DRAG_TXT_TYPE
VSPAERO_PANEL_TRI_TYPE = _vsp.VSPAERO_PANEL_TRI_TYPE
DRAG_BUILD_CSV_TYPE = _vsp.DRAG_BUILD_CSV_TYPE
CFD_FACET_TYPE = _vsp.CFD_FACET_TYPE
CFD_CURV_TYPE = _vsp.CFD_CURV_TYPE
CFD_PLOT3D_TYPE = _vsp.CFD_PLOT3D_TYPE
SET_ALL = _vsp.SET_ALL
SET_SHOWN = _vsp.SET_SHOWN
SET_NOT_SHOWN = _vsp.SET_NOT_SHOWN
SET_FIRST_USER = _vsp.SET_FIRST_USER
INVALID_TYPE = _vsp.INVALID_TYPE
INT_DATA = _vsp.INT_DATA
DOUBLE_DATA = _vsp.DOUBLE_DATA
STRING_DATA = _vsp.STRING_DATA
VEC3D_DATA = _vsp.VEC3D_DATA
MESH_INDEXED_TRI = _vsp.MESH_INDEXED_TRI
MESH_SLICE_TRI = _vsp.MESH_SLICE_TRI
GEOM_XSECS = _vsp.GEOM_XSECS
MESH_INDEX_AND_SLICE_TRI = _vsp.MESH_INDEX_AND_SLICE_TRI
CFD_STL_FILE_NAME = _vsp.CFD_STL_FILE_NAME
CFD_POLY_FILE_NAME = _vsp.CFD_POLY_FILE_NAME
CFD_TRI_FILE_NAME = _vsp.CFD_TRI_FILE_NAME
CFD_OBJ_FILE_NAME = _vsp.CFD_OBJ_FILE_NAME
CFD_DAT_FILE_NAME = _vsp.CFD_DAT_FILE_NAME
CFD_KEY_FILE_NAME = _vsp.CFD_KEY_FILE_NAME
CFD_GMSH_FILE_NAME = _vsp.CFD_GMSH_FILE_NAME
CFD_SRF_FILE_NAME = _vsp.CFD_SRF_FILE_NAME
CFD_TKEY_FILE_NAME = _vsp.CFD_TKEY_FILE_NAME
CFD_FACET_FILE_NAME = _vsp.CFD_FACET_FILE_NAME
CFD_CURV_FILE_NAME = _vsp.CFD_CURV_FILE_NAME
CFD_PLOT3D_FILE_NAME = _vsp.CFD_PLOT3D_FILE_NAME
CFD_NUM_FILE_NAMES = _vsp.CFD_NUM_FILE_NAMES
CFD_MIN_EDGE_LEN = _vsp.CFD_MIN_EDGE_LEN
CFD_MAX_EDGE_LEN = _vsp.CFD_MAX_EDGE_LEN
CFD_MAX_GAP = _vsp.CFD_MAX_GAP
CFD_NUM_CIRCLE_SEGS = _vsp.CFD_NUM_CIRCLE_SEGS
CFD_GROWTH_RATIO = _vsp.CFD_GROWTH_RATIO
CFD_LIMIT_GROWTH_FLAG = _vsp.CFD_LIMIT_GROWTH_FLAG
CFD_INTERSECT_SUBSURFACE_FLAG = _vsp.CFD_INTERSECT_SUBSURFACE_FLAG
CFD_HALF_MESH_FLAG = _vsp.CFD_HALF_MESH_FLAG
CFD_FAR_FIELD_FLAG = _vsp.CFD_FAR_FIELD_FLAG
CFD_FAR_MAX_EDGE_LEN = _vsp.CFD_FAR_MAX_EDGE_LEN
CFD_FAR_MAX_GAP = _vsp.CFD_FAR_MAX_GAP
CFD_FAR_NUM_CIRCLE_SEGS = _vsp.CFD_FAR_NUM_CIRCLE_SEGS
CFD_FAR_SIZE_ABS_FLAG = _vsp.CFD_FAR_SIZE_ABS_FLAG
CFD_FAR_LENGTH = _vsp.CFD_FAR_LENGTH
CFD_FAR_WIDTH = _vsp.CFD_FAR_WIDTH
CFD_FAR_HEIGHT = _vsp.CFD_FAR_HEIGHT
CFD_FAR_X_SCALE = _vsp.CFD_FAR_X_SCALE
CFD_FAR_Y_SCALE = _vsp.CFD_FAR_Y_SCALE
CFD_FAR_Z_SCALE = _vsp.CFD_FAR_Z_SCALE
CFD_FAR_LOC_MAN_FLAG = _vsp.CFD_FAR_LOC_MAN_FLAG
CFD_FAR_LOC_X = _vsp.CFD_FAR_LOC_X
CFD_FAR_LOC_Y = _vsp.CFD_FAR_LOC_Y
CFD_FAR_LOC_Z = _vsp.CFD_FAR_LOC_Z
CFD_WAKE_SCALE = _vsp.CFD_WAKE_SCALE
CFD_WAKE_ANGLE = _vsp.CFD_WAKE_ANGLE
CFD_SRF_XYZ_FLAG = _vsp.CFD_SRF_XYZ_FLAG
POINT_SOURCE = _vsp.POINT_SOURCE
LINE_SOURCE = _vsp.LINE_SOURCE
BOX_SOURCE = _vsp.BOX_SOURCE
ULINE_SOURCE = _vsp.ULINE_SOURCE
WLINE_SOURCE = _vsp.WLINE_SOURCE
NUM_SOURCE_TYPES = _vsp.NUM_SOURCE_TYPES
FEA_MASS_FILE_NAME = _vsp.FEA_MASS_FILE_NAME
FEA_NASTRAN_FILE_NAME = _vsp.FEA_NASTRAN_FILE_NAME
FEA_CALCULIX_FILE_NAME = _vsp.FEA_CALCULIX_FILE_NAME
FEA_STL_FILE_NAME = _vsp.FEA_STL_FILE_NAME
FEA_GMSH_FILE_NAME = _vsp.FEA_GMSH_FILE_NAME
FEA_SRF_FILE_NAME = _vsp.FEA_SRF_FILE_NAME
FEA_CURV_FILE_NAME = _vsp.FEA_CURV_FILE_NAME
FEA_PLOT3D_FILE_NAME = _vsp.FEA_PLOT3D_FILE_NAME
FEA_NUM_FILE_NAMES = _vsp.FEA_NUM_FILE_NAMES
INTERSECT_SRF_FILE_NAME = _vsp.INTERSECT_SRF_FILE_NAME
INTERSECT_CURV_FILE_NAME = _vsp.INTERSECT_CURV_FILE_NAME
INTERSECT_PLOT3D_FILE_NAME = _vsp.INTERSECT_PLOT3D_FILE_NAME
INTERSECT_NUM_FILE_NAMES = _vsp.INTERSECT_NUM_FILE_NAMES
XDDM_VAR = _vsp.XDDM_VAR
XDDM_CONST = _vsp.XDDM_CONST
NORMAL_SURF = _vsp.NORMAL_SURF
WING_SURF = _vsp.WING_SURF
DISK_SURF = _vsp.DISK_SURF
PROP_SURF = _vsp.PROP_SURF
NUM_SURF_TYPES = _vsp.NUM_SURF_TYPES
CFD_NORMAL = _vsp.CFD_NORMAL
CFD_NEGATIVE = _vsp.CFD_NEGATIVE
CFD_TRANSPARENT = _vsp.CFD_TRANSPARENT
CFD_STRUCTURE = _vsp.CFD_STRUCTURE
CFD_STIFFENER = _vsp.CFD_STIFFENER
CFD_NUM_TYPES = _vsp.CFD_NUM_TYPES
SS_LINE = _vsp.SS_LINE
SS_RECTANGLE = _vsp.SS_RECTANGLE
SS_ELLIPSE = _vsp.SS_ELLIPSE
SS_CONTROL = _vsp.SS_CONTROL
SS_LINE_ARRAY = _vsp.SS_LINE_ARRAY
SS_NUM_TYPES = _vsp.SS_NUM_TYPES
CONST_U = _vsp.CONST_U
CONST_W = _vsp.CONST_W
INSIDE = _vsp.INSIDE
OUTSIDE = _vsp.OUTSIDE
NONE = _vsp.NONE
FEA_SLICE = _vsp.FEA_SLICE
FEA_RIB = _vsp.FEA_RIB
FEA_SPAR = _vsp.FEA_SPAR
FEA_FIX_POINT = _vsp.FEA_FIX_POINT
FEA_DOME = _vsp.FEA_DOME
FEA_RIB_ARRAY = _vsp.FEA_RIB_ARRAY
FEA_SLICE_ARRAY = _vsp.FEA_SLICE_ARRAY
FEA_SKIN = _vsp.FEA_SKIN
FEA_NUM_TYPES = _vsp.FEA_NUM_TYPES
FEA_SHELL = _vsp.FEA_SHELL
FEA_BEAM = _vsp.FEA_BEAM
FEA_SHELL_AND_BEAM = _vsp.FEA_SHELL_AND_BEAM
XY_BODY = _vsp.XY_BODY
YZ_BODY = _vsp.YZ_BODY
XZ_BODY = _vsp.XZ_BODY
XY_ABS = _vsp.XY_ABS
YZ_ABS = _vsp.YZ_ABS
XZ_ABS = _vsp.XZ_ABS
SPINE_NORMAL = _vsp.SPINE_NORMAL
SI_UNIT = _vsp.SI_UNIT
CGS_UNIT = _vsp.CGS_UNIT
MPA_UNIT = _vsp.MPA_UNIT
BFT_UNIT = _vsp.BFT_UNIT
BIN_UNIT = _vsp.BIN_UNIT
FEA_XSEC_GENERAL = _vsp.FEA_XSEC_GENERAL
FEA_XSEC_CIRC = _vsp.FEA_XSEC_CIRC
FEA_XSEC_PIPE = _vsp.FEA_XSEC_PIPE
FEA_XSEC_I = _vsp.FEA_XSEC_I
FEA_XSEC_RECT = _vsp.FEA_XSEC_RECT
FEA_XSEC_BOX = _vsp.FEA_XSEC_BOX
AR_WSECT_DRIVER = _vsp.AR_WSECT_DRIVER
SPAN_WSECT_DRIVER = _vsp.SPAN_WSECT_DRIVER
AREA_WSECT_DRIVER = _vsp.AREA_WSECT_DRIVER
TAPER_WSECT_DRIVER = _vsp.TAPER_WSECT_DRIVER
AVEC_WSECT_DRIVER = _vsp.AVEC_WSECT_DRIVER
ROOTC_WSECT_DRIVER = _vsp.ROOTC_WSECT_DRIVER
TIPC_WSECT_DRIVER = _vsp.TIPC_WSECT_DRIVER
SECSWEEP_WSECT_DRIVER = _vsp.SECSWEEP_WSECT_DRIVER
NUM_WSECT_DRIVER = _vsp.NUM_WSECT_DRIVER
SWEEP_WSECT_DRIVER = _vsp.SWEEP_WSECT_DRIVER
SWEEPLOC_WSECT_DRIVER = _vsp.SWEEPLOC_WSECT_DRIVER
SECSWEEPLOC_WSECT_DRIVER = _vsp.SECSWEEPLOC_WSECT_DRIVER
BLEND_FREE = _vsp.BLEND_FREE
BLEND_ANGLES = _vsp.BLEND_ANGLES
BLEND_MATCH_IN_LE_TRAP = _vsp.BLEND_MATCH_IN_LE_TRAP
BLEND_MATCH_IN_TE_TRAP = _vsp.BLEND_MATCH_IN_TE_TRAP
BLEND_MATCH_OUT_LE_TRAP = _vsp.BLEND_MATCH_OUT_LE_TRAP
BLEND_MATCH_OUT_TE_TRAP = _vsp.BLEND_MATCH_OUT_TE_TRAP
BLEND_MATCH_IN_ANGLES = _vsp.BLEND_MATCH_IN_ANGLES
BLEND_MATCH_LE_ANGLES = _vsp.BLEND_MATCH_LE_ANGLES
BLEND_NUM_TYPES = _vsp.BLEND_NUM_TYPES
COLLISION_OK = _vsp.COLLISION_OK
COLLISION_INTERSECT_NO_SOLUTION = _vsp.COLLISION_INTERSECT_NO_SOLUTION
COLLISION_CLEAR_NO_SOLUTION = _vsp.COLLISION_CLEAR_NO_SOLUTION
NO_END_CAP = _vsp.NO_END_CAP
FLAT_END_CAP = _vsp.FLAT_END_CAP
ROUND_END_CAP = _vsp.ROUND_END_CAP
EDGE_END_CAP = _vsp.EDGE_END_CAP
SHARP_END_CAP = _vsp.SHARP_END_CAP
NUM_END_CAP_OPTIONS = _vsp.NUM_END_CAP_OPTIONS
PATCH_NONE = _vsp.PATCH_NONE
PATCH_POINT = _vsp.PATCH_POINT
PATCH_LINE = _vsp.PATCH_LINE
PATCH_COPY = _vsp.PATCH_COPY
PATCH_HALFWAY = _vsp.PATCH_HALFWAY
PATCH_NUM_TYPES = _vsp.PATCH_NUM_TYPES
SET_TARGET = _vsp.SET_TARGET
GEOM_TARGET = _vsp.GEOM_TARGET
NUM_PROJ_TGT_OPTIONS = _vsp.NUM_PROJ_TGT_OPTIONS
NO_BOUNDARY = _vsp.NO_BOUNDARY
SET_BOUNDARY = _vsp.SET_BOUNDARY
GEOM_BOUNDARY = _vsp.GEOM_BOUNDARY
NUM_PROJ_BNDY_OPTIONS = _vsp.NUM_PROJ_BNDY_OPTIONS
X_PROJ = _vsp.X_PROJ
Y_PROJ = _vsp.Y_PROJ
Z_PROJ = _vsp.Z_PROJ
GEOM_PROJ = _vsp.GEOM_PROJ
VEC_PROJ = _vsp.VEC_PROJ
NUM_PROJ_DIR_OPTIONS = _vsp.NUM_PROJ_DIR_OPTIONS
LINEAR = _vsp.LINEAR
PCHIP = _vsp.PCHIP
CEDIT = _vsp.CEDIT
NUM_PCURV_TYPE = _vsp.NUM_PCURV_TYPE
PROP_CHORD = _vsp.PROP_CHORD
PROP_TWIST = _vsp.PROP_TWIST
PROP_RAKE = _vsp.PROP_RAKE
PROP_SKEW = _vsp.PROP_SKEW
NUM_PROP_PCURVE = _vsp.NUM_PROP_PCURVE
VORTEX_LATTICE = _vsp.VORTEX_LATTICE
PANEL = _vsp.PANEL
MANUAL_REF = _vsp.MANUAL_REF
COMPONENT_REF = _vsp.COMPONENT_REF
NUM_REF_TYPES = _vsp.NUM_REF_TYPES
STABILITY_DEFAULT = _vsp.STABILITY_DEFAULT
STABILITY_P_ANALYSIS = _vsp.STABILITY_P_ANALYSIS
STABILITY_Q_ANALYSIS = _vsp.STABILITY_Q_ANALYSIS
STABILITY_R_ANALYSIS = _vsp.STABILITY_R_ANALYSIS
STABILITY_HEAVE = _vsp.STABILITY_HEAVE
STABILITY_IMPULSE = _vsp.STABILITY_IMPULSE
PRECON_MATRIX = _vsp.PRECON_MATRIX
PRECON_JACOBI = _vsp.PRECON_JACOBI
PRECON_SSOR = _vsp.PRECON_SSOR
PD_UNITS_IMPERIAL = _vsp.PD_UNITS_IMPERIAL
PD_UNITS_METRIC = _vsp.PD_UNITS_METRIC
V_UNIT_FT_S = _vsp.V_UNIT_FT_S
V_UNIT_M_S = _vsp.V_UNIT_M_S
V_UNIT_MPH = _vsp.V_UNIT_MPH
V_UNIT_KM_HR = _vsp.V_UNIT_KM_HR
V_UNIT_KEAS = _vsp.V_UNIT_KEAS
V_UNIT_KTAS = _vsp.V_UNIT_KTAS
V_UNIT_MACH = _vsp.V_UNIT_MACH
TEMP_UNIT_K = _vsp.TEMP_UNIT_K
TEMP_UNIT_C = _vsp.TEMP_UNIT_C
TEMP_UNIT_F = _vsp.TEMP_UNIT_F
TEMP_UNIT_R = _vsp.TEMP_UNIT_R
MASS_UNIT_G = _vsp.MASS_UNIT_G
MASS_UNIT_KG = _vsp.MASS_UNIT_KG
MASS_UNIT_TONNE = _vsp.MASS_UNIT_TONNE
MASS_UNIT_LBM = _vsp.MASS_UNIT_LBM
MASS_UNIT_SLUG = _vsp.MASS_UNIT_SLUG
MASS_LBFSEC2IN = _vsp.MASS_LBFSEC2IN
PRES_UNIT_PSF = _vsp.PRES_UNIT_PSF
PRES_UNIT_PSI = _vsp.PRES_UNIT_PSI
PRES_UNIT_BA = _vsp.PRES_UNIT_BA
PRES_UNIT_PA = _vsp.PRES_UNIT_PA
PRES_UNIT_KPA = _vsp.PRES_UNIT_KPA
PRES_UNIT_MPA = _vsp.PRES_UNIT_MPA
PRES_UNIT_INCHHG = _vsp.PRES_UNIT_INCHHG
PRES_UNIT_MMHG = _vsp.PRES_UNIT_MMHG
PRES_UNIT_MMH20 = _vsp.PRES_UNIT_MMH20
PRES_UNIT_MB = _vsp.PRES_UNIT_MB
PRES_UNIT_ATM = _vsp.PRES_UNIT_ATM
RHO_UNIT_SLUG_FT3 = _vsp.RHO_UNIT_SLUG_FT3
RHO_UNIT_G_CM3 = _vsp.RHO_UNIT_G_CM3
RHO_UNIT_KG_M3 = _vsp.RHO_UNIT_KG_M3
RHO_UNIT_TONNE_MM3 = _vsp.RHO_UNIT_TONNE_MM3
RHO_UNIT_LBF_FT3 = _vsp.RHO_UNIT_LBF_FT3
RHO_UNIT_LBFSEC2_IN4 = _vsp.RHO_UNIT_LBFSEC2_IN4
ATMOS_TYPE_US_STANDARD_1976 = _vsp.ATMOS_TYPE_US_STANDARD_1976
ATMOS_TYPE_HERRINGTON_1966 = _vsp.ATMOS_TYPE_HERRINGTON_1966
ATMOS_TYPE_MANUAL_P_R = _vsp.ATMOS_TYPE_MANUAL_P_R
ATMOS_TYPE_MANUAL_P_T = _vsp.ATMOS_TYPE_MANUAL_P_T
ATMOS_TYPE_MANUAL_R_T = _vsp.ATMOS_TYPE_MANUAL_R_T
ATMOS_TYPE_MANUAL_RE_L = _vsp.ATMOS_TYPE_MANUAL_RE_L
CF_LAM_BLASIUS = _vsp.CF_LAM_BLASIUS
CF_LAM_BLASIUS_W_HEAT = _vsp.CF_LAM_BLASIUS_W_HEAT
CF_TURB_EXPLICIT_FIT_SPALDING = _vsp.CF_TURB_EXPLICIT_FIT_SPALDING
CF_TURB_EXPLICIT_FIT_SPALDING_CHI = _vsp.CF_TURB_EXPLICIT_FIT_SPALDING_CHI
CF_TURB_EXPLICIT_FIT_SCHOENHERR = _vsp.CF_TURB_EXPLICIT_FIT_SCHOENHERR
CF_TURB_IMPLICIT_KARMAN = _vsp.CF_TURB_IMPLICIT_KARMAN
CF_TURB_IMPLICIT_SCHOENHERR = _vsp.CF_TURB_IMPLICIT_SCHOENHERR
CF_TURB_IMPLICIT_KARMAN_SCHOENHERR = _vsp.CF_TURB_IMPLICIT_KARMAN_SCHOENHERR
CF_TURB_POWER_LAW_BLASIUS = _vsp.CF_TURB_POWER_LAW_BLASIUS
CF_TURB_POWER_LAW_PRANDTL_LOW_RE = _vsp.CF_TURB_POWER_LAW_PRANDTL_LOW_RE
CF_TURB_POWER_LAW_PRANDTL_MEDIUM_RE = _vsp.CF_TURB_POWER_LAW_PRANDTL_MEDIUM_RE
CF_TURB_POWER_LAW_PRANDTL_HIGH_RE = _vsp.CF_TURB_POWER_LAW_PRANDTL_HIGH_RE
CF_TURB_SCHLICHTING_COMPRESSIBLE = _vsp.CF_TURB_SCHLICHTING_COMPRESSIBLE
CF_TURB_SCHLICHTING_INCOMPRESSIBLE = _vsp.CF_TURB_SCHLICHTING_INCOMPRESSIBLE
CF_TURB_SCHLICHTING_PRANDTL = _vsp.CF_TURB_SCHLICHTING_PRANDTL
CF_TURB_SCHULTZ_GRUNOW_HIGH_RE = _vsp.CF_TURB_SCHULTZ_GRUNOW_HIGH_RE
CF_TURB_SCHULTZ_GRUNOW_SCHOENHERR = _vsp.CF_TURB_SCHULTZ_GRUNOW_SCHOENHERR
CF_TURB_WHITE_CHRISTOPH_COMPRESSIBLE = _vsp.CF_TURB_WHITE_CHRISTOPH_COMPRESSIBLE
CF_TURB_ROUGHNESS_SCHLICHTING_AVG = _vsp.CF_TURB_ROUGHNESS_SCHLICHTING_AVG
CF_TURB_ROUGHNESS_SCHLICHTING_LOCAL = _vsp.CF_TURB_ROUGHNESS_SCHLICHTING_LOCAL
CF_TURB_ROUGHNESS_WHITE = _vsp.CF_TURB_ROUGHNESS_WHITE
CF_TURB_ROUGHNESS_SCHLICHTING_AVG_FLOW_CORRECTION = _vsp.CF_TURB_ROUGHNESS_SCHLICHTING_AVG_FLOW_CORRECTION
CF_TURB_HEATTRANSFER_WHITE_CHRISTOPH = _vsp.CF_TURB_HEATTRANSFER_WHITE_CHRISTOPH
FF_W_MANUAL = _vsp.FF_W_MANUAL
FF_W_EDET_CONV = _vsp.FF_W_EDET_CONV
FF_W_EDET_ADV = _vsp.FF_W_EDET_ADV
FF_W_HOERNER = _vsp.FF_W_HOERNER
FF_W_COVERT = _vsp.FF_W_COVERT
FF_W_SHEVELL = _vsp.FF_W_SHEVELL
FF_W_KROO = _vsp.FF_W_KROO
FF_W_TORENBEEK = _vsp.FF_W_TORENBEEK
FF_W_DATCOM = _vsp.FF_W_DATCOM
FF_W_SCHEMENSKY_6_SERIES_AF = _vsp.FF_W_SCHEMENSKY_6_SERIES_AF
FF_W_SCHEMENSKY_4_SERIES_AF = _vsp.FF_W_SCHEMENSKY_4_SERIES_AF
FF_W_JENKINSON_WING = _vsp.FF_W_JENKINSON_WING
FF_W_JENKINSON_TAIL = _vsp.FF_W_JENKINSON_TAIL
FF_W_SCHEMENSKY_SUPERCRITICAL_AF = _vsp.FF_W_SCHEMENSKY_SUPERCRITICAL_AF
FF_B_MANUAL = _vsp.FF_B_MANUAL
FF_B_SCHEMENSKY_FUSE = _vsp.FF_B_SCHEMENSKY_FUSE
FF_B_SCHEMENSKY_NACELLE = _vsp.FF_B_SCHEMENSKY_NACELLE
FF_B_HOERNER_STREAMBODY = _vsp.FF_B_HOERNER_STREAMBODY
FF_B_TORENBEEK = _vsp.FF_B_TORENBEEK
FF_B_SHEVELL = _vsp.FF_B_SHEVELL
FF_B_COVERT = _vsp.FF_B_COVERT
FF_B_JENKINSON_FUSE = _vsp.FF_B_JENKINSON_FUSE
FF_B_JENKINSON_WING_NACELLE = _vsp.FF_B_JENKINSON_WING_NACELLE
FF_B_JENKINSON_AFT_FUSE_NACELLE = _vsp.FF_B_JENKINSON_AFT_FUSE_NACELLE
EXCRESCENCE_COUNT = _vsp.EXCRESCENCE_COUNT
EXCRESCENCE_CD = _vsp.EXCRESCENCE_CD
EXCRESCENCE_PERCENT_GEOM = _vsp.EXCRESCENCE_PERCENT_GEOM
EXCRESCENCE_MARGIN = _vsp.EXCRESCENCE_MARGIN
EXCRESCENCE_DRAGAREA = _vsp.EXCRESCENCE_DRAGAREA
SS_INC_TREAT_AS_PARENT = _vsp.SS_INC_TREAT_AS_PARENT
SS_INC_SEPARATE_TREATMENT = _vsp.SS_INC_SEPARATE_TREATMENT
SS_INC_ZERO_DRAG = _vsp.SS_INC_ZERO_DRAG
class ErrorObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorObj, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _vsp.new_ErrorObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _vsp.delete_ErrorObj
    __del__ = lambda self: None

    def GetErrorCode(self):
        return _vsp.ErrorObj_GetErrorCode(self)

    def GetErrorString(self):
        return _vsp.ErrorObj_GetErrorString(self)
    __swig_setmethods__["m_ErrorCode"] = _vsp.ErrorObj_m_ErrorCode_set
    __swig_getmethods__["m_ErrorCode"] = _vsp.ErrorObj_m_ErrorCode_get
    if _newclass:
        m_ErrorCode = _swig_property(_vsp.ErrorObj_m_ErrorCode_get, _vsp.ErrorObj_m_ErrorCode_set)
    __swig_setmethods__["m_ErrorString"] = _vsp.ErrorObj_m_ErrorString_set
    __swig_getmethods__["m_ErrorString"] = _vsp.ErrorObj_m_ErrorString_get
    if _newclass:
        m_ErrorString = _swig_property(_vsp.ErrorObj_m_ErrorString_get, _vsp.ErrorObj_m_ErrorString_set)

    def NoError(self):
        return _vsp.ErrorObj_NoError(self)
ErrorObj_swigregister = _vsp.ErrorObj_swigregister
ErrorObj_swigregister(ErrorObj)

class ErrorMgrSingleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorMgrSingleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorMgrSingleton, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetErrorLastCallFlag(self):
        return _vsp.ErrorMgrSingleton_GetErrorLastCallFlag(self)

    def GetNumTotalErrors(self):
        return _vsp.ErrorMgrSingleton_GetNumTotalErrors(self)

    def PopLastError(self):
        return _vsp.ErrorMgrSingleton_PopLastError(self)

    def GetLastError(self):
        return _vsp.ErrorMgrSingleton_GetLastError(self)

    def PopErrorAndPrint(self, stream):
        return _vsp.ErrorMgrSingleton_PopErrorAndPrint(self, stream)

    def AddError(self, code, desc):
        return _vsp.ErrorMgrSingleton_AddError(self, code, desc)

    def NoError(self):
        return _vsp.ErrorMgrSingleton_NoError(self)

    def MessageCallback(self, arg2, data):
        return _vsp.ErrorMgrSingleton_MessageCallback(self, arg2, data)
    if _newclass:
        getInstance = staticmethod(_vsp.ErrorMgrSingleton_getInstance)
    else:
        getInstance = _vsp.ErrorMgrSingleton_getInstance
ErrorMgrSingleton_swigregister = _vsp.ErrorMgrSingleton_swigregister
ErrorMgrSingleton_swigregister(ErrorMgrSingleton)

def ErrorMgrSingleton_getInstance():
    return _vsp.ErrorMgrSingleton_getInstance()
ErrorMgrSingleton_getInstance = _vsp.ErrorMgrSingleton_getInstance


def VSPCheckSetup():
    return _vsp.VSPCheckSetup()
VSPCheckSetup = _vsp.VSPCheckSetup

def VSPRenew():
    return _vsp.VSPRenew()
VSPRenew = _vsp.VSPRenew

def Update():
    return _vsp.Update()
Update = _vsp.Update

def VSPExit(error_code):
    return _vsp.VSPExit(error_code)
VSPExit = _vsp.VSPExit

def ReadVSPFile(file_name):
    return _vsp.ReadVSPFile(file_name)
ReadVSPFile = _vsp.ReadVSPFile

def WriteVSPFile(*args):
    return _vsp.WriteVSPFile(*args)
WriteVSPFile = _vsp.WriteVSPFile

def SetVSP3FileName(file_name):
    return _vsp.SetVSP3FileName(file_name)
SetVSP3FileName = _vsp.SetVSP3FileName

def GetVSPFileName():
    return _vsp.GetVSPFileName()
GetVSPFileName = _vsp.GetVSPFileName

def ClearVSPModel():
    return _vsp.ClearVSPModel()
ClearVSPModel = _vsp.ClearVSPModel

def InsertVSPFile(file_name, parent_geom_id):
    return _vsp.InsertVSPFile(file_name, parent_geom_id)
InsertVSPFile = _vsp.InsertVSPFile

def ExportFile(file_name, write_set_index, file_type):
    return _vsp.ExportFile(file_name, write_set_index, file_type)
ExportFile = _vsp.ExportFile

def ImportFile(file_name, file_type, parent):
    return _vsp.ImportFile(file_name, file_type, parent)
ImportFile = _vsp.ImportFile

def ReadApplyDESFile(file_name):
    return _vsp.ReadApplyDESFile(file_name)
ReadApplyDESFile = _vsp.ReadApplyDESFile

def WriteDESFile(file_name):
    return _vsp.WriteDESFile(file_name)
WriteDESFile = _vsp.WriteDESFile

def ReadApplyXDDMFile(file_name):
    return _vsp.ReadApplyXDDMFile(file_name)
ReadApplyXDDMFile = _vsp.ReadApplyXDDMFile

def WriteXDDMFile(file_name):
    return _vsp.WriteXDDMFile(file_name)
WriteXDDMFile = _vsp.WriteXDDMFile

def GetNumDesignVars():
    return _vsp.GetNumDesignVars()
GetNumDesignVars = _vsp.GetNumDesignVars

def AddDesignVar(parm_id, type):
    return _vsp.AddDesignVar(parm_id, type)
AddDesignVar = _vsp.AddDesignVar

def DeleteAllDesignVars():
    return _vsp.DeleteAllDesignVars()
DeleteAllDesignVars = _vsp.DeleteAllDesignVars

def GetDesignVar(index):
    return _vsp.GetDesignVar(index)
GetDesignVar = _vsp.GetDesignVar

def GetDesignVarType(index):
    return _vsp.GetDesignVarType(index)
GetDesignVarType = _vsp.GetDesignVarType

def SetComputationFileName(file_type, file_name):
    return _vsp.SetComputationFileName(file_type, file_name)
SetComputationFileName = _vsp.SetComputationFileName

def ComputeMassProps(set, num_slices):
    return _vsp.ComputeMassProps(set, num_slices)
ComputeMassProps = _vsp.ComputeMassProps

def ComputeCompGeom(set, half_mesh, file_export_types):
    return _vsp.ComputeCompGeom(set, half_mesh, file_export_types)
ComputeCompGeom = _vsp.ComputeCompGeom

def ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd=0, end_bnd=0):
    return _vsp.ComputePlaneSlice(set, num_slices, norm, auto_bnd, start_bnd, end_bnd)
ComputePlaneSlice = _vsp.ComputePlaneSlice

def ComputeDegenGeom(set, file_export_types):
    return _vsp.ComputeDegenGeom(set, file_export_types)
ComputeDegenGeom = _vsp.ComputeDegenGeom

def ComputeCFDMesh(set, file_export_types):
    return _vsp.ComputeCFDMesh(set, file_export_types)
ComputeCFDMesh = _vsp.ComputeCFDMesh

def SetCFDMeshVal(type, val):
    return _vsp.SetCFDMeshVal(type, val)
SetCFDMeshVal = _vsp.SetCFDMeshVal

def SetCFDWakeFlag(geom_id, flag):
    return _vsp.SetCFDWakeFlag(geom_id, flag)
SetCFDWakeFlag = _vsp.SetCFDWakeFlag

def DeleteAllCFDSources():
    return _vsp.DeleteAllCFDSources()
DeleteAllCFDSources = _vsp.DeleteAllCFDSources

def AddDefaultSources():
    return _vsp.AddDefaultSources()
AddDefaultSources = _vsp.AddDefaultSources

def AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2=0, r2=0, u2=0, w2=0):
    return _vsp.AddCFDSource(type, geom_id, surf_index, l1, r1, u1, w1, l2, r2, u2, w2)
AddCFDSource = _vsp.AddCFDSource

def GetVSPAERORefWingID():
    return _vsp.GetVSPAERORefWingID()
GetVSPAERORefWingID = _vsp.GetVSPAERORefWingID

def SetVSPAERORefWingID(geom_id):
    return _vsp.SetVSPAERORefWingID(geom_id)
SetVSPAERORefWingID = _vsp.SetVSPAERORefWingID

def GetNumAnalysis():
    return _vsp.GetNumAnalysis()
GetNumAnalysis = _vsp.GetNumAnalysis

def ListAnalysis():
    return _vsp.ListAnalysis()
ListAnalysis = _vsp.ListAnalysis

def GetAnalysisInputNames(analysis):
    return _vsp.GetAnalysisInputNames(analysis)
GetAnalysisInputNames = _vsp.GetAnalysisInputNames

def ExecAnalysis(analysis):
    return _vsp.ExecAnalysis(analysis)
ExecAnalysis = _vsp.ExecAnalysis

def GetNumAnalysisInputData(analysis, name):
    return _vsp.GetNumAnalysisInputData(analysis, name)
GetNumAnalysisInputData = _vsp.GetNumAnalysisInputData

def GetAnalysisInputType(analysis, name):
    return _vsp.GetAnalysisInputType(analysis, name)
GetAnalysisInputType = _vsp.GetAnalysisInputType

def GetIntAnalysisInput(analysis, name, index=0):
    return _vsp.GetIntAnalysisInput(analysis, name, index)
GetIntAnalysisInput = _vsp.GetIntAnalysisInput

def GetDoubleAnalysisInput(analysis, name, index=0):
    return _vsp.GetDoubleAnalysisInput(analysis, name, index)
GetDoubleAnalysisInput = _vsp.GetDoubleAnalysisInput

def GetStringAnalysisInput(analysis, name, index=0):
    return _vsp.GetStringAnalysisInput(analysis, name, index)
GetStringAnalysisInput = _vsp.GetStringAnalysisInput

def GetVec3dAnalysisInput(analysis, name, index=0):
    return _vsp.GetVec3dAnalysisInput(analysis, name, index)
GetVec3dAnalysisInput = _vsp.GetVec3dAnalysisInput

def SetAnalysisInputDefaults(analysis):
    return _vsp.SetAnalysisInputDefaults(analysis)
SetAnalysisInputDefaults = _vsp.SetAnalysisInputDefaults

def SetIntAnalysisInput(analysis, name, indata, index=0):
    return _vsp.SetIntAnalysisInput(analysis, name, indata, index)
SetIntAnalysisInput = _vsp.SetIntAnalysisInput

def SetDoubleAnalysisInput(analysis, name, indata, index=0):
    return _vsp.SetDoubleAnalysisInput(analysis, name, indata, index)
SetDoubleAnalysisInput = _vsp.SetDoubleAnalysisInput

def SetStringAnalysisInput(analysis, name, indata, index=0):
    return _vsp.SetStringAnalysisInput(analysis, name, indata, index)
SetStringAnalysisInput = _vsp.SetStringAnalysisInput

def SetVec3dAnalysisInput(analysis, name, indata, index=0):
    return _vsp.SetVec3dAnalysisInput(analysis, name, indata, index)
SetVec3dAnalysisInput = _vsp.SetVec3dAnalysisInput

def PrintAnalysisInputs(analysis_name):
    return _vsp.PrintAnalysisInputs(analysis_name)
PrintAnalysisInputs = _vsp.PrintAnalysisInputs

def GetAllResultsNames():
    return _vsp.GetAllResultsNames()
GetAllResultsNames = _vsp.GetAllResultsNames

def GetAllDataNames(results_id):
    return _vsp.GetAllDataNames(results_id)
GetAllDataNames = _vsp.GetAllDataNames

def GetNumResults(name):
    return _vsp.GetNumResults(name)
GetNumResults = _vsp.GetNumResults

def FindResultsID(name, index=0):
    return _vsp.FindResultsID(name, index)
FindResultsID = _vsp.FindResultsID

def FindLatestResultsID(name):
    return _vsp.FindLatestResultsID(name)
FindLatestResultsID = _vsp.FindLatestResultsID

def GetNumData(results_id, data_name):
    return _vsp.GetNumData(results_id, data_name)
GetNumData = _vsp.GetNumData

def GetResultsType(results_id, data_name):
    return _vsp.GetResultsType(results_id, data_name)
GetResultsType = _vsp.GetResultsType

def GetIntResults(id, name, index=0):
    return _vsp.GetIntResults(id, name, index)
GetIntResults = _vsp.GetIntResults

def GetDoubleResults(id, name, index=0):
    return _vsp.GetDoubleResults(id, name, index)
GetDoubleResults = _vsp.GetDoubleResults

def GetStringResults(id, name, index=0):
    return _vsp.GetStringResults(id, name, index)
GetStringResults = _vsp.GetStringResults

def GetVec3dResults(id, name, index=0):
    return _vsp.GetVec3dResults(id, name, index)
GetVec3dResults = _vsp.GetVec3dResults

def CreateGeomResults(geom_id, name):
    return _vsp.CreateGeomResults(geom_id, name)
CreateGeomResults = _vsp.CreateGeomResults

def DeleteAllResults():
    return _vsp.DeleteAllResults()
DeleteAllResults = _vsp.DeleteAllResults

def DeleteResult(id):
    return _vsp.DeleteResult(id)
DeleteResult = _vsp.DeleteResult

def WriteResultsCSVFile(id, file_name):
    return _vsp.WriteResultsCSVFile(id, file_name)
WriteResultsCSVFile = _vsp.WriteResultsCSVFile

def PrintResults(results_id):
    return _vsp.PrintResults(results_id)
PrintResults = _vsp.PrintResults

def StartGui():
    return _vsp.StartGui()
StartGui = _vsp.StartGui

def GetGeomTypes():
    return _vsp.GetGeomTypes()
GetGeomTypes = _vsp.GetGeomTypes

def AddGeom(*args):
    return _vsp.AddGeom(*args)
AddGeom = _vsp.AddGeom

def UpdateGeom(geom_id):
    return _vsp.UpdateGeom(geom_id)
UpdateGeom = _vsp.UpdateGeom

def DeleteGeom(geom_id):
    return _vsp.DeleteGeom(geom_id)
DeleteGeom = _vsp.DeleteGeom

def DeleteGeomVec(del_vec):
    return _vsp.DeleteGeomVec(del_vec)
DeleteGeomVec = _vsp.DeleteGeomVec

def CutGeomToClipboard(geom_id):
    return _vsp.CutGeomToClipboard(geom_id)
CutGeomToClipboard = _vsp.CutGeomToClipboard

def CopyGeomToClipboard(geom_id):
    return _vsp.CopyGeomToClipboard(geom_id)
CopyGeomToClipboard = _vsp.CopyGeomToClipboard

def PasteGeomClipboard(*args):
    return _vsp.PasteGeomClipboard(*args)
PasteGeomClipboard = _vsp.PasteGeomClipboard

def FindGeoms():
    return _vsp.FindGeoms()
FindGeoms = _vsp.FindGeoms

def FindGeomsWithName(name):
    return _vsp.FindGeomsWithName(name)
FindGeomsWithName = _vsp.FindGeomsWithName

def FindGeom(name, index):
    return _vsp.FindGeom(name, index)
FindGeom = _vsp.FindGeom

def SetGeomName(geom_id, name):
    return _vsp.SetGeomName(geom_id, name)
SetGeomName = _vsp.SetGeomName

def GetGeomName(geom_id):
    return _vsp.GetGeomName(geom_id)
GetGeomName = _vsp.GetGeomName

def GetGeomParmIDs(geom_id):
    return _vsp.GetGeomParmIDs(geom_id)
GetGeomParmIDs = _vsp.GetGeomParmIDs

def GetParm(geom_id, name, group):
    return _vsp.GetParm(geom_id, name, group)
GetParm = _vsp.GetParm

def GetNumXSecSurfs(geom_id):
    return _vsp.GetNumXSecSurfs(geom_id)
GetNumXSecSurfs = _vsp.GetNumXSecSurfs

def GetNumMainSurfs(geom_id):
    return _vsp.GetNumMainSurfs(geom_id)
GetNumMainSurfs = _vsp.GetNumMainSurfs

def AddSubSurf(geom_id, type, surfindex=0):
    return _vsp.AddSubSurf(geom_id, type, surfindex)
AddSubSurf = _vsp.AddSubSurf

def GetSubSurf(*args):
    return _vsp.GetSubSurf(*args)
GetSubSurf = _vsp.GetSubSurf

def DeleteSubSurf(*args):
    return _vsp.DeleteSubSurf(*args)
DeleteSubSurf = _vsp.DeleteSubSurf

def SetSubSurfName(*args):
    return _vsp.SetSubSurfName(*args)
SetSubSurfName = _vsp.SetSubSurfName

def GetSubSurfName(*args):
    return _vsp.GetSubSurfName(*args)
GetSubSurfName = _vsp.GetSubSurfName

def GetSubSurfIndex(sub_id):
    return _vsp.GetSubSurfIndex(sub_id)
GetSubSurfIndex = _vsp.GetSubSurfIndex

def GetSubSurfIDVec(geom_id):
    return _vsp.GetSubSurfIDVec(geom_id)
GetSubSurfIDVec = _vsp.GetSubSurfIDVec

def GetAllSubSurfIDs():
    return _vsp.GetAllSubSurfIDs()
GetAllSubSurfIDs = _vsp.GetAllSubSurfIDs

def GetNumSubSurf(geom_id):
    return _vsp.GetNumSubSurf(geom_id)
GetNumSubSurf = _vsp.GetNumSubSurf

def GetSubSurfType(sub_id):
    return _vsp.GetSubSurfType(sub_id)
GetSubSurfType = _vsp.GetSubSurfType

def GetSubSurfParmIDs(sub_id):
    return _vsp.GetSubSurfParmIDs(sub_id)
GetSubSurfParmIDs = _vsp.GetSubSurfParmIDs

def AddFeaStruct(geom_id, init_skin=True, surfindex=0):
    return _vsp.AddFeaStruct(geom_id, init_skin, surfindex)
AddFeaStruct = _vsp.AddFeaStruct

def DeleteFeaStruct(geom_id, fea_struct_id):
    return _vsp.DeleteFeaStruct(geom_id, fea_struct_id)
DeleteFeaStruct = _vsp.DeleteFeaStruct

def GetFeaStructName(geom_id, fea_struct_id):
    return _vsp.GetFeaStructName(geom_id, fea_struct_id)
GetFeaStructName = _vsp.GetFeaStructName

def SetFeaStructName(geom_id, fea_struct_id, name):
    return _vsp.SetFeaStructName(geom_id, fea_struct_id, name)
SetFeaStructName = _vsp.SetFeaStructName

def AddFeaPart(geom_id, fea_struct_id, type):
    return _vsp.AddFeaPart(geom_id, fea_struct_id, type)
AddFeaPart = _vsp.AddFeaPart

def DeleteFeaPart(geom_id, fea_struct_id, part_id):
    return _vsp.DeleteFeaPart(geom_id, fea_struct_id, part_id)
DeleteFeaPart = _vsp.DeleteFeaPart

def AddFeaSubSurf(geom_id, fea_struct_id, type):
    return _vsp.AddFeaSubSurf(geom_id, fea_struct_id, type)
AddFeaSubSurf = _vsp.AddFeaSubSurf

def DeleteFeaSubSurf(geom_id, fea_struct_id, ss_id):
    return _vsp.DeleteFeaSubSurf(geom_id, fea_struct_id, ss_id)
DeleteFeaSubSurf = _vsp.DeleteFeaSubSurf

def AddFeaMaterial():
    return _vsp.AddFeaMaterial()
AddFeaMaterial = _vsp.AddFeaMaterial

def AddFeaProperty(property_type=0):
    return _vsp.AddFeaProperty(property_type)
AddFeaProperty = _vsp.AddFeaProperty

def SetFeaMeshVal(geom_id, fea_struct_id, type, val):
    return _vsp.SetFeaMeshVal(geom_id, fea_struct_id, type, val)
SetFeaMeshVal = _vsp.SetFeaMeshVal

def SetFeaMeshFileName(geom_id, fea_struct_id, file_type, file_name):
    return _vsp.SetFeaMeshFileName(geom_id, fea_struct_id, file_type, file_name)
SetFeaMeshFileName = _vsp.SetFeaMeshFileName

def ComputeFeaMesh(geom_id, fea_struct_id, file_type):
    return _vsp.ComputeFeaMesh(geom_id, fea_struct_id, file_type)
ComputeFeaMesh = _vsp.ComputeFeaMesh

def CutXSec(geom_id, index):
    return _vsp.CutXSec(geom_id, index)
CutXSec = _vsp.CutXSec

def CopyXSec(geom_id, index):
    return _vsp.CopyXSec(geom_id, index)
CopyXSec = _vsp.CopyXSec

def PasteXSec(geom_id, index):
    return _vsp.PasteXSec(geom_id, index)
PasteXSec = _vsp.PasteXSec

def InsertXSec(geom_id, index, type):
    return _vsp.InsertXSec(geom_id, index, type)
InsertXSec = _vsp.InsertXSec

def SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2):
    return _vsp.SetDriverGroup(geom_id, section_index, driver_0, driver_1, driver_2)
SetDriverGroup = _vsp.SetDriverGroup

def GetXSecSurf(geom_id, index):
    return _vsp.GetXSecSurf(geom_id, index)
GetXSecSurf = _vsp.GetXSecSurf

def GetNumXSec(xsec_surf_id):
    return _vsp.GetNumXSec(xsec_surf_id)
GetNumXSec = _vsp.GetNumXSec

def GetXSec(xsec_surf_id, xsec_index):
    return _vsp.GetXSec(xsec_surf_id, xsec_index)
GetXSec = _vsp.GetXSec

def ChangeXSecShape(xsec_surf_id, xsec_index, type):
    return _vsp.ChangeXSecShape(xsec_surf_id, xsec_index, type)
ChangeXSecShape = _vsp.ChangeXSecShape

def SetXSecSurfGlobalXForm(xsec_surf_id, mat):
    return _vsp.SetXSecSurfGlobalXForm(xsec_surf_id, mat)
SetXSecSurfGlobalXForm = _vsp.SetXSecSurfGlobalXForm

def GetXSecSurfGlobalXForm(xsec_surf_id):
    return _vsp.GetXSecSurfGlobalXForm(xsec_surf_id)
GetXSecSurfGlobalXForm = _vsp.GetXSecSurfGlobalXForm

def GetXSecShape(xsec_id):
    return _vsp.GetXSecShape(xsec_id)
GetXSecShape = _vsp.GetXSecShape

def GetXSecWidth(xsec_id):
    return _vsp.GetXSecWidth(xsec_id)
GetXSecWidth = _vsp.GetXSecWidth

def GetXSecHeight(xsec_id):
    return _vsp.GetXSecHeight(xsec_id)
GetXSecHeight = _vsp.GetXSecHeight

def SetXSecWidthHeight(xsec_id, w, h):
    return _vsp.SetXSecWidthHeight(xsec_id, w, h)
SetXSecWidthHeight = _vsp.SetXSecWidthHeight

def GetXSecParmIDs(xsec_id):
    return _vsp.GetXSecParmIDs(xsec_id)
GetXSecParmIDs = _vsp.GetXSecParmIDs

def GetXSecParm(xsec_id, name):
    return _vsp.GetXSecParm(xsec_id, name)
GetXSecParm = _vsp.GetXSecParm

def ReadFileXSec(xsec_id, file_name):
    return _vsp.ReadFileXSec(xsec_id, file_name)
ReadFileXSec = _vsp.ReadFileXSec

def SetXSecPnts(xsec_id, pnt_vec):
    return _vsp.SetXSecPnts(xsec_id, pnt_vec)
SetXSecPnts = _vsp.SetXSecPnts

def ComputeXSecPnt(xsec_id, fract):
    return _vsp.ComputeXSecPnt(xsec_id, fract)
ComputeXSecPnt = _vsp.ComputeXSecPnt

def ComputeXSecTan(xsec_id, fract):
    return _vsp.ComputeXSecTan(xsec_id, fract)
ComputeXSecTan = _vsp.ComputeXSecTan

def ResetXSecSkinParms(xsec_id):
    return _vsp.ResetXSecSkinParms(xsec_id)
ResetXSecSkinParms = _vsp.ResetXSecSkinParms

def SetXSecContinuity(xsec_id, cx):
    return _vsp.SetXSecContinuity(xsec_id, cx)
SetXSecContinuity = _vsp.SetXSecContinuity

def SetXSecTanAngles(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecTanAngles(xsec_id, side, top, right, bottom, left)
SetXSecTanAngles = _vsp.SetXSecTanAngles

def SetXSecTanSlews(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecTanSlews(xsec_id, side, top, right, bottom, left)
SetXSecTanSlews = _vsp.SetXSecTanSlews

def SetXSecTanStrengths(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecTanStrengths(xsec_id, side, top, right, bottom, left)
SetXSecTanStrengths = _vsp.SetXSecTanStrengths

def SetXSecCurvatures(xsec_id, side, top, right, bottom, left):
    return _vsp.SetXSecCurvatures(xsec_id, side, top, right, bottom, left)
SetXSecCurvatures = _vsp.SetXSecCurvatures

def ReadFileAirfoil(xsec_id, file_name):
    return _vsp.ReadFileAirfoil(xsec_id, file_name)
ReadFileAirfoil = _vsp.ReadFileAirfoil

def SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec):
    return _vsp.SetAirfoilPnts(xsec_id, up_pnt_vec, low_pnt_vec)
SetAirfoilPnts = _vsp.SetAirfoilPnts

def WriteSeligAirfoilFile(airfoil_name, ordered_airfoil_pnts):
    return _vsp.WriteSeligAirfoilFile(airfoil_name, ordered_airfoil_pnts)
WriteSeligAirfoilFile = _vsp.WriteSeligAirfoilFile

def GetHersheyBarLiftDist(npts, alpha, Vinf, span, full_span_flag=False):
    return _vsp.GetHersheyBarLiftDist(npts, alpha, Vinf, span, full_span_flag)
GetHersheyBarLiftDist = _vsp.GetHersheyBarLiftDist

def GetVKTAirfoilPnts(npts, alpha, epsilon, kappa, tau):
    return _vsp.GetVKTAirfoilPnts(npts, alpha, epsilon, kappa, tau)
GetVKTAirfoilPnts = _vsp.GetVKTAirfoilPnts

def GetVKTAirfoilCpDist(alpha, epsilon, kappa, tau, xyz_data):
    return _vsp.GetVKTAirfoilCpDist(alpha, epsilon, kappa, tau, xyz_data)
GetVKTAirfoilCpDist = _vsp.GetVKTAirfoilCpDist

def GetEllipsoidSurfPnts(center, abc_rad, u_npts=20, w_npts=20):
    return _vsp.GetEllipsoidSurfPnts(center, abc_rad, u_npts, w_npts)
GetEllipsoidSurfPnts = _vsp.GetEllipsoidSurfPnts

def GetEllipsoidCpDist(surf_pnt_vec, abc_rad, V_inf):
    return _vsp.GetEllipsoidCpDist(surf_pnt_vec, abc_rad, V_inf)
GetEllipsoidCpDist = _vsp.GetEllipsoidCpDist

def IntegrateEllipsoidFlow(abc_rad, abc_index):
    return _vsp.IntegrateEllipsoidFlow(abc_rad, abc_index)
IntegrateEllipsoidFlow = _vsp.IntegrateEllipsoidFlow

def GetAirfoilUpperPnts(xsec_id):
    return _vsp.GetAirfoilUpperPnts(xsec_id)
GetAirfoilUpperPnts = _vsp.GetAirfoilUpperPnts

def GetAirfoilLowerPnts(xsec_id):
    return _vsp.GetAirfoilLowerPnts(xsec_id)
GetAirfoilLowerPnts = _vsp.GetAirfoilLowerPnts

def GetUpperCSTCoefs(xsec_id):
    return _vsp.GetUpperCSTCoefs(xsec_id)
GetUpperCSTCoefs = _vsp.GetUpperCSTCoefs

def GetLowerCSTCoefs(xsec_id):
    return _vsp.GetLowerCSTCoefs(xsec_id)
GetLowerCSTCoefs = _vsp.GetLowerCSTCoefs

def GetUpperCSTDegree(xsec_id):
    return _vsp.GetUpperCSTDegree(xsec_id)
GetUpperCSTDegree = _vsp.GetUpperCSTDegree

def GetLowerCSTDegree(xsec_id):
    return _vsp.GetLowerCSTDegree(xsec_id)
GetLowerCSTDegree = _vsp.GetLowerCSTDegree

def SetUpperCST(xsec_id, deg, coefs):
    return _vsp.SetUpperCST(xsec_id, deg, coefs)
SetUpperCST = _vsp.SetUpperCST

def SetLowerCST(xsec_id, deg, coefs):
    return _vsp.SetLowerCST(xsec_id, deg, coefs)
SetLowerCST = _vsp.SetLowerCST

def PromoteCSTUpper(xsec_id):
    return _vsp.PromoteCSTUpper(xsec_id)
PromoteCSTUpper = _vsp.PromoteCSTUpper

def PromoteCSTLower(xsec_id):
    return _vsp.PromoteCSTLower(xsec_id)
PromoteCSTLower = _vsp.PromoteCSTLower

def DemoteCSTUpper(xsec_id):
    return _vsp.DemoteCSTUpper(xsec_id)
DemoteCSTUpper = _vsp.DemoteCSTUpper

def DemoteCSTLower(xsec_id):
    return _vsp.DemoteCSTLower(xsec_id)
DemoteCSTLower = _vsp.DemoteCSTLower

def FitAfCST(xsec_surf_id, xsec_index, deg):
    return _vsp.FitAfCST(xsec_surf_id, xsec_index, deg)
FitAfCST = _vsp.FitAfCST

def GetNumSets():
    return _vsp.GetNumSets()
GetNumSets = _vsp.GetNumSets

def SetSetName(index, name):
    return _vsp.SetSetName(index, name)
SetSetName = _vsp.SetSetName

def GetSetName(index):
    return _vsp.GetSetName(index)
GetSetName = _vsp.GetSetName

def GetGeomSetAtIndex(index):
    return _vsp.GetGeomSetAtIndex(index)
GetGeomSetAtIndex = _vsp.GetGeomSetAtIndex

def GetGeomSet(name):
    return _vsp.GetGeomSet(name)
GetGeomSet = _vsp.GetGeomSet

def GetSetIndex(name):
    return _vsp.GetSetIndex(name)
GetSetIndex = _vsp.GetSetIndex

def GetSetFlag(geom_id, set_index):
    return _vsp.GetSetFlag(geom_id, set_index)
GetSetFlag = _vsp.GetSetFlag

def SetSetFlag(geom_id, set_index, flag):
    return _vsp.SetSetFlag(geom_id, set_index, flag)
SetSetFlag = _vsp.SetSetFlag

def ValidParm(id):
    return _vsp.ValidParm(id)
ValidParm = _vsp.ValidParm

def SetParmVal(*args):
    return _vsp.SetParmVal(*args)
SetParmVal = _vsp.SetParmVal

def SetParmValLimits(parm_id, val, lower_limit, upper_limit):
    return _vsp.SetParmValLimits(parm_id, val, lower_limit, upper_limit)
SetParmValLimits = _vsp.SetParmValLimits

def SetParmValUpdate(*args):
    return _vsp.SetParmValUpdate(*args)
SetParmValUpdate = _vsp.SetParmValUpdate

def GetParmVal(*args):
    return _vsp.GetParmVal(*args)
GetParmVal = _vsp.GetParmVal

def GetIntParmVal(parm_id):
    return _vsp.GetIntParmVal(parm_id)
GetIntParmVal = _vsp.GetIntParmVal

def GetBoolParmVal(parm_id):
    return _vsp.GetBoolParmVal(parm_id)
GetBoolParmVal = _vsp.GetBoolParmVal

def SetParmUpperLimit(parm_id, val):
    return _vsp.SetParmUpperLimit(parm_id, val)
SetParmUpperLimit = _vsp.SetParmUpperLimit

def GetParmUpperLimit(parm_id):
    return _vsp.GetParmUpperLimit(parm_id)
GetParmUpperLimit = _vsp.GetParmUpperLimit

def SetParmLowerLimit(parm_id, val):
    return _vsp.SetParmLowerLimit(parm_id, val)
SetParmLowerLimit = _vsp.SetParmLowerLimit

def GetParmLowerLimit(parm_id):
    return _vsp.GetParmLowerLimit(parm_id)
GetParmLowerLimit = _vsp.GetParmLowerLimit

def GetParmType(parm_id):
    return _vsp.GetParmType(parm_id)
GetParmType = _vsp.GetParmType

def GetParmName(parm_id):
    return _vsp.GetParmName(parm_id)
GetParmName = _vsp.GetParmName

def GetParmGroupName(parm_id):
    return _vsp.GetParmGroupName(parm_id)
GetParmGroupName = _vsp.GetParmGroupName

def GetParmDisplayGroupName(parm_id):
    return _vsp.GetParmDisplayGroupName(parm_id)
GetParmDisplayGroupName = _vsp.GetParmDisplayGroupName

def GetParmContainer(parm_id):
    return _vsp.GetParmContainer(parm_id)
GetParmContainer = _vsp.GetParmContainer

def SetParmDescript(parm_id, desc):
    return _vsp.SetParmDescript(parm_id, desc)
SetParmDescript = _vsp.SetParmDescript

def FindParm(parm_container_id, parm_name, group_name):
    return _vsp.FindParm(parm_container_id, parm_name, group_name)
FindParm = _vsp.FindParm

def FindContainers():
    return _vsp.FindContainers()
FindContainers = _vsp.FindContainers

def FindContainersWithName(name):
    return _vsp.FindContainersWithName(name)
FindContainersWithName = _vsp.FindContainersWithName

def FindContainer(name, index):
    return _vsp.FindContainer(name, index)
FindContainer = _vsp.FindContainer

def GetContainerName(parm_container_id):
    return _vsp.GetContainerName(parm_container_id)
GetContainerName = _vsp.GetContainerName

def FindContainerGroupNames(parm_container_id):
    return _vsp.FindContainerGroupNames(parm_container_id)
FindContainerGroupNames = _vsp.FindContainerGroupNames

def FindContainerParmIDs(parm_container_id):
    return _vsp.FindContainerParmIDs(parm_container_id)
FindContainerParmIDs = _vsp.FindContainerParmIDs

def ComputeMinClearanceDistance(*args):
    return _vsp.ComputeMinClearanceDistance(*args)
ComputeMinClearanceDistance = _vsp.ComputeMinClearanceDistance

def SnapParm(*args):
    return _vsp.SnapParm(*args)
SnapParm = _vsp.SnapParm

def AddVarPresetGroup(group_name):
    return _vsp.AddVarPresetGroup(group_name)
AddVarPresetGroup = _vsp.AddVarPresetGroup

def AddVarPresetSetting(setting_name):
    return _vsp.AddVarPresetSetting(setting_name)
AddVarPresetSetting = _vsp.AddVarPresetSetting

def AddVarPresetParm(*args):
    return _vsp.AddVarPresetParm(*args)
AddVarPresetParm = _vsp.AddVarPresetParm

def EditVarPresetParm(*args):
    return _vsp.EditVarPresetParm(*args)
EditVarPresetParm = _vsp.EditVarPresetParm

def DeleteVarPresetParm(*args):
    return _vsp.DeleteVarPresetParm(*args)
DeleteVarPresetParm = _vsp.DeleteVarPresetParm

def SwitchVarPreset(group_name, setting_name):
    return _vsp.SwitchVarPreset(group_name, setting_name)
SwitchVarPreset = _vsp.SwitchVarPreset

def DeleteVarPresetSet(group_name, setting_name):
    return _vsp.DeleteVarPresetSet(group_name, setting_name)
DeleteVarPresetSet = _vsp.DeleteVarPresetSet

def GetCurrentGroupName():
    return _vsp.GetCurrentGroupName()
GetCurrentGroupName = _vsp.GetCurrentGroupName

def GetCurrentSettingName():
    return _vsp.GetCurrentSettingName()
GetCurrentSettingName = _vsp.GetCurrentSettingName

def GetVarPresetGroupNames():
    return _vsp.GetVarPresetGroupNames()
GetVarPresetGroupNames = _vsp.GetVarPresetGroupNames

def GetVarPresetSettingNamesWName(group_name):
    return _vsp.GetVarPresetSettingNamesWName(group_name)
GetVarPresetSettingNamesWName = _vsp.GetVarPresetSettingNamesWName

def GetVarPresetSettingNamesWIndex(group_index):
    return _vsp.GetVarPresetSettingNamesWIndex(group_index)
GetVarPresetSettingNamesWIndex = _vsp.GetVarPresetSettingNamesWIndex

def GetVarPresetParmVals():
    return _vsp.GetVarPresetParmVals()
GetVarPresetParmVals = _vsp.GetVarPresetParmVals

def GetVarPresetParmValsWNames(group_name, setting_name):
    return _vsp.GetVarPresetParmValsWNames(group_name, setting_name)
GetVarPresetParmValsWNames = _vsp.GetVarPresetParmValsWNames

def GetVarPresetParmIDs():
    return _vsp.GetVarPresetParmIDs()
GetVarPresetParmIDs = _vsp.GetVarPresetParmIDs

def GetVarPresetParmIDsWName(group_name):
    return _vsp.GetVarPresetParmIDsWName(group_name)
GetVarPresetParmIDsWName = _vsp.GetVarPresetParmIDsWName

def SetPCurve(geom_id, pcurveid, tvec, valvec, newtype):
    return _vsp.SetPCurve(geom_id, pcurveid, tvec, valvec, newtype)
SetPCurve = _vsp.SetPCurve

def PCurveConvertTo(geom_id, pcurveid, newtype):
    return _vsp.PCurveConvertTo(geom_id, pcurveid, newtype)
PCurveConvertTo = _vsp.PCurveConvertTo

def PCurveGetType(geom_id, pcurveid):
    return _vsp.PCurveGetType(geom_id, pcurveid)
PCurveGetType = _vsp.PCurveGetType

def PCurveGetTVec(geom_id, pcurveid):
    return _vsp.PCurveGetTVec(geom_id, pcurveid)
PCurveGetTVec = _vsp.PCurveGetTVec

def PCurveGetValVec(geom_id, pcurveid):
    return _vsp.PCurveGetValVec(geom_id, pcurveid)
PCurveGetValVec = _vsp.PCurveGetValVec

def PCurveDeletePt(geom_id, pcurveid, indx):
    return _vsp.PCurveDeletePt(geom_id, pcurveid, indx)
PCurveDeletePt = _vsp.PCurveDeletePt

def PCurveSplit(geom_id, pcurveid, tsplit):
    return _vsp.PCurveSplit(geom_id, pcurveid, tsplit)
PCurveSplit = _vsp.PCurveSplit

def AutoGroupVSPAEROControlSurfaces():
    return _vsp.AutoGroupVSPAEROControlSurfaces()
AutoGroupVSPAEROControlSurfaces = _vsp.AutoGroupVSPAEROControlSurfaces

def GetNumControlSurfaceGroups():
    return _vsp.GetNumControlSurfaceGroups()
GetNumControlSurfaceGroups = _vsp.GetNumControlSurfaceGroups

def AddExcrescence(excresName, excresType, excresVal):
    return _vsp.AddExcrescence(excresName, excresType, excresVal)
AddExcrescence = _vsp.AddExcrescence

def DeleteExcrescence(index):
    return _vsp.DeleteExcrescence(index)
DeleteExcrescence = _vsp.DeleteExcrescence

def WriteAtmosphereCSVFile(file_name, atmos_type):
    return _vsp.WriteAtmosphereCSVFile(file_name, atmos_type)
WriteAtmosphereCSVFile = _vsp.WriteAtmosphereCSVFile

def CalcAtmosphere(alt, delta_temp, atmos_type, temp, pres, pres_ratio, rho_ratio):
    return _vsp.CalcAtmosphere(alt, delta_temp, atmos_type, temp, pres, pres_ratio, rho_ratio)
CalcAtmosphere = _vsp.CalcAtmosphere

def WriteBodyFFCSVFile(file_name):
    return _vsp.WriteBodyFFCSVFile(file_name)
WriteBodyFFCSVFile = _vsp.WriteBodyFFCSVFile

def WriteWingFFCSVFile(file_name):
    return _vsp.WriteWingFFCSVFile(file_name)
WriteWingFFCSVFile = _vsp.WriteWingFFCSVFile

def WriteCfEqnCSVFile(file_name):
    return _vsp.WriteCfEqnCSVFile(file_name)
WriteCfEqnCSVFile = _vsp.WriteCfEqnCSVFile

def WritePartialCfMethodCSVFile(file_name):
    return _vsp.WritePartialCfMethodCSVFile(file_name)
WritePartialCfMethodCSVFile = _vsp.WritePartialCfMethodCSVFile

def CompPnt01(geom_id, surf_indx, u, w):
    return _vsp.CompPnt01(geom_id, surf_indx, u, w)
CompPnt01 = _vsp.CompPnt01

def CompNorm01(geom_id, surf_indx, u, w):
    return _vsp.CompNorm01(geom_id, surf_indx, u, w)
CompNorm01 = _vsp.CompNorm01

def CompTanU01(geom_id, surf_indx, u, w):
    return _vsp.CompTanU01(geom_id, surf_indx, u, w)
CompTanU01 = _vsp.CompTanU01

def CompTanW01(geom_id, surf_indx, u, w):
    return _vsp.CompTanW01(geom_id, surf_indx, u, w)
CompTanW01 = _vsp.CompTanW01

def CompCurvature01(geom_id, surf_indx, u, w):
    return _vsp.CompCurvature01(geom_id, surf_indx, u, w)
CompCurvature01 = _vsp.CompCurvature01

def ProjPnt01(geom_id, surf_indx, pt):
    return _vsp.ProjPnt01(geom_id, surf_indx, pt)
ProjPnt01 = _vsp.ProjPnt01

def ProjPnt01I(geom_id, pt):
    return _vsp.ProjPnt01I(geom_id, pt)
ProjPnt01I = _vsp.ProjPnt01I

def ProjPnt01Guess(geom_id, surf_indx, pt, u0, w0):
    return _vsp.ProjPnt01Guess(geom_id, surf_indx, pt, u0, w0)
ProjPnt01Guess = _vsp.ProjPnt01Guess

def CompVecPnt01(geom_id, surf_indx, u_in_vec, w_in_vec):
    return _vsp.CompVecPnt01(geom_id, surf_indx, u_in_vec, w_in_vec)
CompVecPnt01 = _vsp.CompVecPnt01

def CompVecNorm01(geom_id, surf_indx, us, ws):
    return _vsp.CompVecNorm01(geom_id, surf_indx, us, ws)
CompVecNorm01 = _vsp.CompVecNorm01

def CompVecCurvature01(geom_id, surf_indx, us, ws):
    return _vsp.CompVecCurvature01(geom_id, surf_indx, us, ws)
CompVecCurvature01 = _vsp.CompVecCurvature01

def ProjVecPnt01(geom_id, surf_indx, pts):
    return _vsp.ProjVecPnt01(geom_id, surf_indx, pts)
ProjVecPnt01 = _vsp.ProjVecPnt01

def ProjVecPnt01Guess(geom_id, surf_indx, pts, u0s, w0s):
    return _vsp.ProjVecPnt01Guess(geom_id, surf_indx, pts, u0s, w0s)
ProjVecPnt01Guess = _vsp.ProjVecPnt01Guess

def GetUWTess01(geom_id, surf_indx):
    return _vsp.GetUWTess01(geom_id, surf_indx)
GetUWTess01 = _vsp.GetUWTess01

def AddRuler(startgeomid, startsurfindx, startu, startw, endgeomid, endsurfindx, endu, endw, name):
    return _vsp.AddRuler(startgeomid, startsurfindx, startu, startw, endgeomid, endsurfindx, endu, endw, name)
AddRuler = _vsp.AddRuler

def GetAllRulers():
    return _vsp.GetAllRulers()
GetAllRulers = _vsp.GetAllRulers

def DelRuler(id):
    return _vsp.DelRuler(id)
DelRuler = _vsp.DelRuler

def DeleteAllRulers():
    return _vsp.DeleteAllRulers()
DeleteAllRulers = _vsp.DeleteAllRulers

def AddProbe(geomid, surfindx, u, w, name):
    return _vsp.AddProbe(geomid, surfindx, u, w, name)
AddProbe = _vsp.AddProbe

def GetAllProbes():
    return _vsp.GetAllProbes()
GetAllProbes = _vsp.GetAllProbes

def DelProbe(id):
    return _vsp.DelProbe(id)
DelProbe = _vsp.DelProbe

def DeleteAllProbes():
    return _vsp.DeleteAllProbes()
DeleteAllProbes = _vsp.DeleteAllProbes

def AddVec3D(INOUT, x, y, z):
    return _vsp.AddVec3D(INOUT, x, y, z)
AddVec3D = _vsp.AddVec3D
class vec3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _vsp.vec3d_v_set
    __swig_getmethods__["v"] = _vsp.vec3d_v_get
    if _newclass:
        v = _swig_property(_vsp.vec3d_v_get, _vsp.vec3d_v_set)
    __swig_destroy__ = _vsp.delete_vec3d
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _vsp.new_vec3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_xyz(self, xx, yy, zz):
        return _vsp.vec3d_set_xyz(self, xx, yy, zz)

    def set_x(self, xx):
        return _vsp.vec3d_set_x(self, xx)

    def set_y(self, yy):
        return _vsp.vec3d_set_y(self, yy)

    def set_z(self, zz):
        return _vsp.vec3d_set_z(self, zz)

    def get_pnt(self, *args):
        return _vsp.vec3d_get_pnt(self, *args)

    def x(self):
        return _vsp.vec3d_x(self)

    def y(self):
        return _vsp.vec3d_y(self)

    def z(self):
        return _vsp.vec3d_z(self)

    def data(self):
        return _vsp.vec3d_data(self)

    def rotate_x(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_x(self, cos_alpha, sin_alpha)

    def rotate_y(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_y(self, cos_alpha, sin_alpha)

    def rotate_z(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_z(self, cos_alpha, sin_alpha)

    def scale_x(self, scale):
        return _vsp.vec3d_scale_x(self, scale)

    def scale_y(self, scale):
        return _vsp.vec3d_scale_y(self, scale)

    def scale_z(self, scale):
        return _vsp.vec3d_scale_z(self, scale)

    def offset_x(self, offset):
        return _vsp.vec3d_offset_x(self, offset)

    def offset_y(self, offset):
        return _vsp.vec3d_offset_y(self, offset)

    def offset_z(self, offset):
        return _vsp.vec3d_offset_z(self, offset)

    def rotate_z_zero_x(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_z_zero_x(self, cos_alpha, sin_alpha)

    def rotate_z_zero_y(self, cos_alpha, sin_alpha):
        return _vsp.vec3d_rotate_z_zero_y(self, cos_alpha, sin_alpha)

    def reflect_xy(self):
        return _vsp.vec3d_reflect_xy(self)

    def reflect_xz(self):
        return _vsp.vec3d_reflect_xz(self)

    def reflect_yz(self):
        return _vsp.vec3d_reflect_yz(self)

    def swap_xy(self):
        return _vsp.vec3d_swap_xy(self)

    def swap_xz(self):
        return _vsp.vec3d_swap_xz(self)

    def swap_yz(self):
        return _vsp.vec3d_swap_yz(self)

    def mag(self):
        return _vsp.vec3d_mag(self)

    def normalize(self):
        return _vsp.vec3d_normalize(self)

    def major_comp(self):
        return _vsp.vec3d_major_comp(self)

    def minor_comp(self):
        return _vsp.vec3d_minor_comp(self)
vec3d_swigregister = _vsp.vec3d_swigregister
vec3d_swigregister(vec3d)
cvar = _vsp.cvar

def dist(a, b):
    return _vsp.dist(a, b)
dist = _vsp.dist

def dist_squared(a, b):
    return _vsp.dist_squared(a, b)
dist_squared = _vsp.dist_squared

def dot(a, b):
    return _vsp.dot(a, b)
dot = _vsp.dot

def cross(a, b):
    return _vsp.cross(a, b)
cross = _vsp.cross

def angle(a, b):
    return _vsp.angle(a, b)
angle = _vsp.angle

def signed_angle(a, b, ref):
    return _vsp.signed_angle(a, b, ref)
signed_angle = _vsp.signed_angle

def cos_angle(a, b):
    return _vsp.cos_angle(a, b)
cos_angle = _vsp.cos_angle

def radius_of_circle(p1, p2, p3):
    return _vsp.radius_of_circle(p1, p2, p3)
radius_of_circle = _vsp.radius_of_circle

def center_of_circle(p1, p2, p3, center):
    return _vsp.center_of_circle(p1, p2, p3, center)
center_of_circle = _vsp.center_of_circle

def dist_pnt_2_plane(org, norm, pnt):
    return _vsp.dist_pnt_2_plane(org, norm, pnt)
dist_pnt_2_plane = _vsp.dist_pnt_2_plane

def dist_pnt_2_line(line_pt1, line_pt2, pnt):
    return _vsp.dist_pnt_2_line(line_pt1, line_pt2, pnt)
dist_pnt_2_line = _vsp.dist_pnt_2_line

def proj_pnt_on_line_seg(line_pt1, line_pt2, pnt):
    return _vsp.proj_pnt_on_line_seg(line_pt1, line_pt2, pnt)
proj_pnt_on_line_seg = _vsp.proj_pnt_on_line_seg

def proj_pnt_on_ray(line_pt1, line_pt2, pnt):
    return _vsp.proj_pnt_on_ray(line_pt1, line_pt2, pnt)
proj_pnt_on_ray = _vsp.proj_pnt_on_ray

def proj_pnt_on_line(line_pt1, line_pt2, pnt):
    return _vsp.proj_pnt_on_line(line_pt1, line_pt2, pnt)
proj_pnt_on_line = _vsp.proj_pnt_on_line

def proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt):
    return _vsp.proj_pnt_to_plane(org, plane_ln1, plane_ln2, pnt)
proj_pnt_to_plane = _vsp.proj_pnt_to_plane

def tri_seg_intersect(A, B, C, D, E, u, w, t):
    return _vsp.tri_seg_intersect(A, B, C, D, E, u, w, t)
tri_seg_intersect = _vsp.tri_seg_intersect

def tri_ray_intersect(A, B, C, D, E, u, w, t):
    return _vsp.tri_ray_intersect(A, B, C, D, E, u, w, t)
tri_ray_intersect = _vsp.tri_ray_intersect

def plane_ray_intersect(*args):
    return _vsp.plane_ray_intersect(*args)
plane_ray_intersect = _vsp.plane_ray_intersect

def ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2):
    return _vsp.ray_ray_intersect(A, B, C, D, int_pnt1, int_pnt2)
ray_ray_intersect = _vsp.ray_ray_intersect

def tetra_volume(A, B, C):
    return _vsp.tetra_volume(A, B, C)
tetra_volume = _vsp.tetra_volume

def area(A, B, C):
    return _vsp.area(A, B, C)
area = _vsp.area

def poly_area(pnt_vec):
    return _vsp.poly_area(pnt_vec)
poly_area = _vsp.poly_area

def dist3D_Segment_to_Segment(*args):
    return _vsp.dist3D_Segment_to_Segment(*args)
dist3D_Segment_to_Segment = _vsp.dist3D_Segment_to_Segment

def nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn):
    return _vsp.nearSegSeg(L0, L1, S0, S1, Lt, Ln, St, Sn)
nearSegSeg = _vsp.nearSegSeg

def pointLineDistSquared(p, lp0, lp1, t):
    return _vsp.pointLineDistSquared(p, lp0, lp1, t)
pointLineDistSquared = _vsp.pointLineDistSquared

def pointSegDistSquared(p, sp0, sp1, t):
    return _vsp.pointSegDistSquared(p, sp0, sp1, t)
pointSegDistSquared = _vsp.pointSegDistSquared

def point_on_line(lp0, lp1, t):
    return _vsp.point_on_line(lp0, lp1, t)
point_on_line = _vsp.point_on_line

def MapToPlane(p, planeOrig, planeVec1, planeVec2):
    return _vsp.MapToPlane(p, planeOrig, planeVec1, planeVec2)
MapToPlane = _vsp.MapToPlane

def MapFromPlane(uw, planeOrig, planeVec1, planeVec2):
    return _vsp.MapFromPlane(uw, planeOrig, planeVec1, planeVec2)
MapFromPlane = _vsp.MapFromPlane

def plane_half_space(planeOrig, planeNorm, pnt):
    return _vsp.plane_half_space(planeOrig, planeNorm, pnt)
plane_half_space = _vsp.plane_half_space

def line_line_intersect(p1, p2, p3, p4, s, t):
    return _vsp.line_line_intersect(p1, p2, p3, p4, s, t)
line_line_intersect = _vsp.line_line_intersect

def RotateArbAxis(p, theta, r):
    return _vsp.RotateArbAxis(p, theta, r)
RotateArbAxis = _vsp.RotateArbAxis

def BarycentricWeights(v0, v1, v2, p):
    return _vsp.BarycentricWeights(v0, v1, v2, p)
BarycentricWeights = _vsp.BarycentricWeights

def BilinearWeights(p0, p1, p, weights):
    return _vsp.BilinearWeights(p0, p1, p, weights)
BilinearWeights = _vsp.BilinearWeights

def tri_tri_min_dist(v0, v1, v2, v3, v4, v5):
    return _vsp.tri_tri_min_dist(v0, v1, v2, v3, v4, v5)
tri_tri_min_dist = _vsp.tri_tri_min_dist

def pnt_tri_min_dist(v0, v1, v2, pnt):
    return _vsp.pnt_tri_min_dist(v0, v1, v2, pnt)
pnt_tri_min_dist = _vsp.pnt_tri_min_dist

def slerp(a, b, t):
    return _vsp.slerp(a, b, t)
slerp = _vsp.slerp


def to_string(v):
    return _vsp.to_string(v)
to_string = _vsp.to_string
# This file is compatible with both classic and new-style classes.


